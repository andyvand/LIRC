#!/usr/bin/env python3

'''
Install data from a configuration file generated by lirc-setup.
Must run as root.
'''

USAGE = '''
lirc-install-configuration [configuration [options]]

[configuration] is as generated by lirc-setup, defaults to
./configuration. [options] is the lirc options file, defaults
to /etc/lirc/lirc_options.conf. lirc-install-configuration
must run as root.
'''

import configparser
import os, os.path
import sys
import yaml

_CONFIG_PATH = "configuration.conf"
_OPTIONS_PATH = "/etc/lirc/lirc_options.conf"
_MODINIT_PATH = "/etc/modprobe.d/lirc-modinit.conf"
_BLACKLIST_PATH = "/etc/modprobe.d/lirc-blacklist.conf"


def write_modprobe_file(env_var, default_path, content):
    path = os.getenv(env_var)
    print("")
    if not path:
        path = default_path
    if os.path.exists(path):
        os.rename(path, path + '.configsave')
        print("Saving old %s as %s." % (path, path + '.configsave'))
    with open(path, 'w') as f:
        f.write(content)
    print("New %s:" % path)
    print(content)


def set_modinit(config, options):
    ''' Possibly update the lirc init file in /etc/modprobe.d. '''
    try:
        value = config.get('configuration', 'modinit')
    except configparser.NoOptionError:
        return
    if not value:
        return
    modinit = '# Generated by lirc-install-configuration\n'
    modinit += value + '\n'
    write_modprobe_file('MODINIT_PATH', _MODINIT_PATH, modinit)


def set_blacklist(config, options):
    ''' Possibly update the lirc blacklist file in /etc/modprobe.d. '''
    try:
        value = config.get('configuration', 'blacklist')
    except configparser.NoOptionError:
        return
    if not value:
        return
    blacklist = '# Generated by lirc-install-configuration\n'
    blacklist += value + '\n'
    write_modprobe_file('BLACKLIST_PATH', _BLACKLIST_PATH, blacklist)


def update_options(config, options):
    ''' Update options in lircd_options.conf. '''
    for opt in ['device', 'lircd_conf', 'lircmd_conf']:

        try:
            value = config.get('configuration', opt)
        except configparser.NoOptionError:
            continue
        options.set('lircd', opt, value)
        print("%-16s: new value %s" % (opt, value))
    try:
        value = config.get('configuration', 'modprobe')
    except configparser.NoOptionError:
        return
    else:
        options.set('modprobe', opt, value)
        print("%-16s: new value %s" % (opt, value))


def main():
    ''' Indeed: main function. '''
    if len(sys.argv) > 1 and sys.argv[1] in ['-h', '--help']:
        print(USAGE)
        sys.exit(0)
    elif len(sys.argv) > 3:
        print(USAGE)
        sys.exit(1)
    if len(sys.argv) == 3:
        config_path = sys.argv[1]
        options_path = sys.argv[2]
    elif len(sys.argv) == 2:
        config_path = sys.argv[1]
        options_path = _OPTIONS_PATH
    else:
        config_path =  _CONFIG_PATH
        options_path = _OPTIONS_PATH
    for path in [config_path, options_path]:
        if not os.path.exists(path):
            sys.stderr.write("Error: %s: no such file.\n" % path)
            sys.exit(2)

    config = configparser.RawConfigParser()
    config.read(config_path)
    options = configparser.RawConfigParser()
    options.read(options_path)

    update_options(config, options)
    set_modinit(config, options)
    set_blacklist(config, options)
    with open(options_path, 'w') as f:
        options.write(f)


main()

#                                             vim: set expandtab ts=4 sw=4:

