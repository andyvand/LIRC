#!/usr/bin/env python3

''' Create the legacy hwdb table using data in hardware.yaml '''

import sys
import yaml

YAML_PATH = '../hardware.yaml'

HEADER = '''
# LIRC - Hardware DataBase
#
# THIS IS A GENERATED FILE. DO NOT EDIT.
#
# This file lists all the remote controls supported by LIRC
# in a parseable form. It's legacy file kept for compatiblity.
# The current file hardware.yaml should be a better source in
# most cases.
#
# The format is:
#
# [remote controls type]
# description;driver;lirc driver;HW_DEFAULT;lircd_conf;
#
# The HW_DEFAULT field is always empty.
#
#

'''

def _add_submenu(menu):
    ''' Return all entries for a submenu as a string of table rows. '''

    def getit(remote,  what, _default=''):
        ''' Get a value from a remote, use default if not existing. '''
        try:
            value = menu['submenus'][remote][what]
            if isinstance(value, list):
                return ' '.join(value)
            return value
        except KeyError:
            return _default

    s = '[' + menu["label"] + ']\n'
    try:
        children = menu['submenus'].keys()
    except KeyError:
        return ""
    for remote in children:
        s += getit(remote, 'label') + ';'
        s += getit(remote, 'modules') + ';'
        s += getit(remote, 'driver') + ';;'
        files = [getit(remote, 'lircd_conf'), getit(remote, 'lircmd.conf')]
        files = [f_ for f_ in files if f_]
        s += ' '.join(files).replace('run_select_any_config', '') + ';\n'
    return s


if len(sys.argv) == 2:
    yaml_path = sys.argv[1]
elif len(sys.argv) == 1:
    yaml_path = YAML_PATH
else:
    print("Usage: data2hwdb [hardware.yaml path]")
    sys.exit(1)


with open(yaml_path) as f:
    hardware = yaml.load(f.read())

print(HEADER)
text = ''
start_menu = hardware['lirc']['main_menu']['submenus']['driver_select']
for key, m in start_menu['submenus'].items():
    text += _add_submenu(m)
print(text)
